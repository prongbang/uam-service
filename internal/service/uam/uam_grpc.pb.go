// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: internal/service/uam/uam.proto

package uam

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UamClient is the client API for Uam service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UamClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
}

type uamClient struct {
	cc grpc.ClientConnInterface
}

func NewUamClient(cc grpc.ClientConnInterface) UamClient {
	return &uamClient{cc}
}

func (c *uamClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/uam.Uam/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UamServer is the server API for Uam service.
// All implementations must embed UnimplementedUamServer
// for forward compatibility
type UamServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	mustEmbedUnimplementedUamServer()
}

// UnimplementedUamServer must be embedded to have forward compatible implementations.
type UnimplementedUamServer struct {
}

func (UnimplementedUamServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUamServer) mustEmbedUnimplementedUamServer() {}

// UnsafeUamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UamServer will
// result in compilation errors.
type UnsafeUamServer interface {
	mustEmbedUnimplementedUamServer()
}

func RegisterUamServer(s grpc.ServiceRegistrar, srv UamServer) {
	s.RegisterService(&Uam_ServiceDesc, srv)
}

func _Uam_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UamServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uam.Uam/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UamServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Uam_ServiceDesc is the grpc.ServiceDesc for Uam service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Uam_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "uam.Uam",
	HandlerType: (*UamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Uam_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/service/uam/uam.proto",
}
