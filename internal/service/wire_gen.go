// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package service

import (
	"github.com/casbin/casbin/v2"
	"github.com/prongbang/uam-service/internal/service/database"
	"github.com/prongbang/uam-service/internal/service/uam"
	"github.com/prongbang/uam-service/internal/shared/auth"
	"github.com/prongbang/uam-service/internal/shared/forgot"
	"github.com/prongbang/uam-service/internal/shared/role"
	"github.com/prongbang/uam-service/internal/shared/user"
	"github.com/prongbang/uam-service/internal/shared/user_role"
)

// Injectors from wire.go:

func New(dbDriver database.Drivers, enforce *casbin.Enforcer) Service {
	dataSource := role.NewDataSource(dbDriver)
	repository := role.NewRepository(dataSource)
	useCase := role.NewUseCase(repository)
	handler := role.NewHandler(useCase)
	authDataSource := auth.NewDataSource(dbDriver)
	authRepository := auth.NewRepository(authDataSource)
	userDataSource := user.NewDataSource(dbDriver)
	userRepository := user.NewRepository(userDataSource)
	userUseCase := user.NewUseCase(userRepository, enforce)
	authUseCase := auth.NewUseCase(authRepository, useCase, userUseCase)
	authHandler := auth.NewHandler(authUseCase)
	userHandler := user.NewHandler(userUseCase)
	forgotDataSource := forgot.NewDataSource(dbDriver)
	forgotRepository := forgot.NewRepository(forgotDataSource)
	forgotUseCase := forgot.NewUseCase(forgotRepository)
	forgotHandler := forgot.NewHandler(forgotUseCase)
	user_roleDataSource := user_role.NewDataSource(dbDriver)
	user_roleRepository := user_role.NewRepository(user_roleDataSource)
	user_roleUseCase := user_role.NewUseCase(user_roleRepository)
	user_roleHandler := user_role.NewHandler(user_roleUseCase)
	validate := role.NewValidate()
	authValidate := auth.NewValidate()
	userValidate := user.NewValidate()
	forgotValidate := forgot.NewValidate()
	user_roleValidate := user_role.NewValidate()
	apiRouter := uam.NewRouter(handler, authHandler, userHandler, forgotHandler, user_roleHandler, validate, authValidate, userValidate, forgotValidate, user_roleValidate)
	serviceRouters := NewRouters(apiRouter)
	serviceAPI := NewAPI(serviceRouters)
	authServer := auth.NewServer(userUseCase, authUseCase)
	roleServer := role.NewServer(useCase)
	userServer := user.NewServer(userUseCase, useCase)
	grpcListener := uam.NewListener(authServer, roleServer, userServer)
	grpc := NewGRPC(grpcListener)
	serviceService := NewService(serviceAPI, grpc)
	return serviceService
}
